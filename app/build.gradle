plugins {
    id "cpp-application"
    id "cpp-unit-test"
    id "de.undercouch.download" version "5.0.1"
}

ext {
    boost_version = "1_78"
    msvc_version = "142"
    sdl_version = "2.0.20"
    sdl_image_version = "2.0.5"
    sdl_ttf_version = "2.0.18"
    glm_version = "0.9.9.8"
    glew_version = "2.2.0"
}

version = "0.1.0-alpha01"

application {
    targetMachines = [machines.windows.x86_64 /*, machines.windows.x86 */]

    binaries.configureEach { binary ->
        binary.dependencies {
            if (targetMachine.architecture.name == MachineArchitecture.X86_64) {
                implementation(files("$buildDir/lib/SDL2-$sdl_version/lib/x64/SDL2main.lib"))
                implementation(files("$buildDir/lib/SDL2-$sdl_version/lib/x64/SDL2.lib"))
                implementation(files("$buildDir/lib/SDL2_image-$sdl_image_version/lib/x64/SDL2_image.lib"))
                implementation(files("$buildDir/lib/SDL2_ttf-$sdl_ttf_version/lib/x64/SDL2_ttf.lib"))
                implementation(files("$buildDir/lib/glew-$glew_version/lib/Release/x64/glew32.lib"))
                implementation(files("${project(":assimp").buildDir}/debug/lib/Debug/assimp-vc142-mtd.lib"))
//                 implementation(files("${System.env.BOOST_LIBRARYDIR_64}/libboost_python310-vc$msvc_version-mt-s-x64-${boost_version}.lib"))
//                 implementation(files("${System.env.PYTHONLIBHOME}/libs/python310.lib"))
            } else {
                implementation(files("$buildDir/lib/SDL2-$sdl_version/lib/x86/SDL2main.lib"))
                implementation(files("$buildDir/lib/SDL2-$sdl_version/lib/x86/SDL2.lib"))
                implementation(files("$buildDir/lib/SDL2_image-$sdl_image_version/lib/x86/SDL2_image.lib"))
                implementation(files("$buildDir/lib/SDL2_ttf-$sdl_image_version/lib/x86/SDL2_ttf.lib"))
                implementation(files("$buildDir/lib/glew-$glew_version/lib/Release/Win32/glew32.lib"))
//                 implementation(files("${System.env.BOOST_LIBRARYDIR_32}/libboost_python310-vc$msvc_version-mt-s-x32-${boost_version}.lib"))
//                 implementation(files("${System.env.PYTHONLIBHOME}/libs/python310.lib"))
            }
        }

        binary.linkTask.get().configure {
            linkerArgs.addAll toolChain.map { toolChain ->
                if (toolChain instanceof VisualCpp) {
                    return ["Shell32.lib", "opengl32.lib", "glu32.lib", "/SUBSYSTEM:CONSOLE"]
                } else {
                    return []
                }
            }
        }

        binary.compileTask.get().configure {
            dependsOn project(":assimp").assembleDebug
            dependsOn copyInclude
            includes {
                ["$buildDir/include", "${System.env.PYTHONLIBHOME}/include", "${System.env.BOOST_INCLUDEDIR}"]
            }
        }

        binary.installTask.get().configure {
            if (targetPlatform.get().architecture.name == MachineArchitecture.X86_64) {
                libs += fileTree("$buildDir/lib") {
                    include("**/x64/*.dll")
                }
                libs += fileTree("${project(":assimp").buildDir}/debug/bin") {
                    include("**/*.dll")
                }
                libs += fileTree("${System.env.BOOST_LIBRARYDIR_64}") {
                    include("boost_python310-vc$msvc_version-mt-x64-${boost_version}.dll")
                }
            } else {
                libs += fileTree("$buildDir/lib") {
                    include("**/x86/*.dll")
                }
                libs += fileTree("${project(":assimp").buildDir}/debug/bin") {
                    include("**/*.dll")
                }
                libs += fileTree("${System.env.BOOST_LIBRARYDIR_32}") {
                    include("boost_python310-vc$msvc_version-mt-x32-${boost_version}.dll")
                }
            }
        }
    }
}

unitTest {
    targetMachines = [machines.windows.x86_64/*, machines.windows.x86*/]
    binaries.configureEach { binary ->
        dependencies {
            if (targetMachine.architecture.name == MachineArchitecture.X86_64) {
                implementation(files("$buildDir/lib/SDL2-$sdl_version/lib/x64/SDL2test.lib"))
            } else {
                implementation(files("$buildDir/lib/SDL2-$sdl_version/lib/x86/SDL2test.lib"))
            }
        }

        binary.linkTask.get().configure {
            linkerArgs.addAll toolChain.map { toolChain ->
                if (toolChain instanceof VisualCpp) {
                    return ["Shell32.lib", "opengl32.lib", "glu32.lib", "/SUBSYSTEM:CONSOLE"]
                } else {
                    return []
                }
            }
        }

        binary.compileTask.get().configure {
            dependsOn copyInclude
            includes {
                ["$buildDir/include", "${System.env.PYTHONLIBHOME}/include", "${System.env.BOOST_INCLUDEDIR}"]
            }
        }

        binary.installTask.get().configure {
            if (targetPlatform.get().architecture.name == MachineArchitecture.X86_64) {
                libs += fileTree("$buildDir/lib") {
                    include("**/x64/*.dll")
                }
                libs += fileTree("${project(":assimp").buildDir}/debug/bin") {
                    include("**/*.dll")
                }
                libs += fileTree("${System.env.BOOST_LIBRARYDIR_64}") {
                    include("boost_python310-vc$msvc_version-mt-x64-${boost_version}.dll")
                }
            } else {
                libs += fileTree("$buildDir/lib") {
                    include("**/x86/*.dll")
                }
                libs += fileTree("${project(":assimp").buildDir}/debug/bin") {
                    include("**/*.dll")
                }
                libs += fileTree("${System.env.BOOST_LIBRARYDIR_32}") {
                    include("boost_python310-vc$msvc_version-mt-x32-${boost_version}.dll")
                }
            }
        }
    }
}

tasks {
    task downloadLibs(type: Download) {
        description "Download library ZIP files"
        src(["https://www.libsdl.org/release/SDL2-devel-$sdl_version-VC.zip",
             "https://www.libsdl.org/projects/SDL_image/release/SDL2_image-devel-$sdl_image_version-VC.zip",
             "https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-devel-$sdl_ttf_version-VC.zip",
             "https://github.com/g-truc/glm/releases/download/$glm_version/glm-${glm_version}.zip",
             "https://github.com/nigels-com/glew/releases/download/glew-${glew_version}/glew-$glew_version-win32.zip"])
        dest buildDir
        onlyIfModified true
    }

    task extractLibs(type: Copy) {
        description "Unpack libraries"
        dependsOn downloadLibs
        from zipTree("$buildDir/SDL2-devel-$sdl_version-VC.zip")
        from zipTree("$buildDir/SDL2_image-devel-$sdl_image_version-VC.zip")
        from zipTree("$buildDir/SDL2_ttf-devel-$sdl_ttf_version-VC.zip")
        from zipTree("$buildDir/glm-${glm_version}.zip")
        from zipTree("$buildDir/glew-$glew_version-win32.zip")
        into "$buildDir/lib"
    }

    task copySdlInclude(type: Copy) {
        description "Copy SDL2 includes"
        dependsOn extractLibs
        from "$buildDir/lib/SDL2-$sdl_version/include"
        into "$buildDir/include/SDL2"
    }

    task copySdlImageInclude(type: Copy) {
        description "Copy SDL2_image includes"
        dependsOn extractLibs
        from "$buildDir/lib/SDL2_image-$sdl_image_version/include"
        into "$buildDir/include/SDL2"
    }

    task copySdlTtfInclude(type: Copy) {
        description "Copy SDL2_ttf includes"
        dependsOn extractLibs
        from "$buildDir/lib/SDL2_ttf-$sdl_ttf_version/include"
        into "$buildDir/include/SDL2"
    }

    task copyGlmInclude(type: Copy) {
        description "Copy glm includes"
        dependsOn extractLibs
        from "$buildDir/lib/glm/glm"
        into "$buildDir/include/glm"
    }

    task copyGlewInclude(type: Copy) {
        description "Copy glew includes"
        dependsOn extractLibs
        from "$buildDir/lib/glew-${glew_version}/include/GL"
        into "$buildDir/include/GL"
    }

    task copyAssImpInclude(type: Copy) {
        dependsOn tasks.getByPath(":assimp:assembleDebug")
        from "${project(":assimp").buildDir}/debug/include/assimp"
        into "$buildDir/include/assimp"
    }

    task copyInclude(type: Task) {
        dependsOn copySdlInclude
        dependsOn copySdlImageInclude
        dependsOn copySdlTtfInclude
        dependsOn copyGlmInclude
        dependsOn copyGlewInclude
        dependsOn copyAssImpInclude
    }

    task copyAssetsDebug(type: Copy) {
        from "${projectDir}/../res/"
        into "${buildDir}/install/main/debug/lib/res"
    }
    task copyAssetsRelease(type: Copy) {
        from "${projectDir}/../res/"
        into "${buildDir}/install/main/release/lib/res"
    }
}

assemble.finalizedBy copyAssetsDebug
assemble.finalizedBy copyAssetsRelease